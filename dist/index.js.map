{"version":3,"sources":["../src/utils/logger.ts","../src/const.ts","../src/utils/renderTitle.ts","../src/utils/getPackageManager.ts","../src/index.ts"],"names":["chalk","logger","args","path","fileURLToPath","TITLE_TEXT","__filename","__dirname","PROJECT_ROOT","gradient","getUserPkgManager","userAgent","colorPallete","renderTitle","gradientTitle","main","err"],"mappings":"AAAA,OAAOA,MAAW,QAEX,IAAMC,EAAS,CACpB,SAASC,EAAiB,CACxB,QAAQ,IAAIF,EAAM,IAAI,GAAGE,CAAI,CAAC,CAChC,EACA,QAAQA,EAAiB,CACvB,QAAQ,IAAIF,EAAM,OAAO,GAAGE,CAAI,CAAC,CACnC,EACA,QAAQA,EAAiB,CACvB,QAAQ,IAAIF,EAAM,KAAK,GAAGE,CAAI,CAAC,CACjC,EACA,WAAWA,EAAiB,CAC1B,QAAQ,IAAIF,EAAM,MAAM,GAAGE,CAAI,CAAC,CAClC,CACF,ECfA,OAAOC,MAAU,OACjB,OAAS,iBAAAC,MAAqB,MAEvB,IAAMC,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWbC,EAAaF,EAAc,YAAY,GAAG,EAC1CG,EAAYJ,EAAK,QAAQG,CAAU,EACnCE,EAAeL,EAAK,QAAQI,EAAW,KAAK,ECfzD,OAAOE,MAAc,kBCCd,IAAMC,EAA0C,IAAM,CAE3D,IAAMC,EAAY,QAAQ,IAAI,sBAE9B,OAAIA,EACEA,EAAU,WAAW,MAAM,EACtB,OACEA,EAAU,WAAW,MAAM,EAC7B,OAEA,MAIF,KAEX,EDdA,IAAMC,EAAe,CACnB,MAAO,UACP,KAAM,UACN,KAAM,UACN,OAAQ,UACR,QAAS,SACX,EAEaC,EAAc,IAAM,CAC/B,IAAMC,EAAgBL,EAAS,OAAO,OAAOG,CAAY,CAAC,EAAE,UAC1DP,CACF,EAEA,QAAQ,IAAIK,EAAkB,CAAC,EAC/B,QAAQ,IAAI;AAAA;AAAA,CAAM,EAClB,QAAQ,IAAII,CAAa,CAC3B,EEjBA,IAAMC,EAAO,SAAY,CACvBF,EAAY,CAEd,EAEAE,EAAK,EAAE,MAAOC,GAAQ,CACpBf,EAAO,MAAM,0BAA0B,EACnCe,aAAe,MACjBf,EAAO,MAAMe,CAAG,GAEhBf,EAAO,MACL,+EACF,EACA,QAAQ,IAAIe,CAAG,GAEjB,QAAQ,KAAK,CAAC,CAChB,CAAC","sourcesContent":["import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n};\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nexport const TITLE_TEXT = `\n ######\\\\             #\\\\       ##\\\\                  ######\\\\  ##\\\\       ######\\\\ \n##  __##\\\\           ## |      \\\\__|                ##  __##\\\\ ## |      \\\\_##  _|\n## /  \\\\__| ######\\\\  #######\\\\  ##\\\\ #######\\\\        ## /  \\\\__|## |        ## |  \n\\\\######\\\\   \\\\____##\\\\ ##  __##\\\\ ## |##  __##\\\\       ## |      ## |        ## |  \n \\\\____##\\\\  ####### |## |  ## |## |## |  ## |      ## |      ## |        ## |  \n##\\\\   ## |##  __## |## |  ## |## |## |  ## |      ## |  ##\\\\ ## |        ## |  \n\\\\######  |\\\\####### |#######  |## |## |  ## |      \\\\######  |########\\\\ ######\\\\ \n \\\\______/  \\\\_______|\\\\_______/ \\\\__|\\\\__|  \\\\__|       \\\\______/ \\\\________|\\\\______|\n`;\n\nexport const __filename = fileURLToPath(import.meta.url);\nexport const __dirname = path.dirname(__filename);\nexport const PROJECT_ROOT = path.resolve(__dirname, \"../\");\nexport const DEFAULT_APP_NAME = \"sabin-cli\";\nexport const CREATE_NPM_PACKAGE = \"create-npm-package\";\n","import { TITLE_TEXT } from \"@/const.js\";\nimport gradient from \"gradient-string\";\nimport { getUserPkgManager } from \"./getPackageManager.js\";\n\nconst colorPallete = {\n  light: \"#00b4d8\",\n  base: \"#0096c7\",\n  dark: \"#0077b6\",\n  darker: \"#023e8a\",\n  darkest: \"#03045e\",\n};\n\nexport const renderTitle = () => {\n  const gradientTitle = gradient(Object.values(colorPallete)).multiline(\n    TITLE_TEXT\n  );\n\n  console.log(getUserPkgManager());\n  console.log(\"\\n\\n\");\n  console.log(gradientTitle);\n};\n","export type PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\n\nexport const getUserPkgManager: () => PackageManager = () => {\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith(\"yarn\")) {\n      return \"yarn\";\n    } else if (userAgent.startsWith(\"pnpm\")) {\n      return \"pnpm\";\n    } else {\n      return \"npm\";\n    }\n  } else {\n    // If no user agent is set, assume npm\n    return \"npm\";\n  }\n};\n","import { logger } from \"./utils/logger.js\";\nimport { renderTitle } from \"./utils/renderTitle.js\";\n\nconst main = async () => {\n  renderTitle();\n  return;\n};\n\nmain().catch((err) => {\n  logger.error(\"Aborting installation...\");\n  if (err instanceof Error) {\n    logger.error(err);\n  } else {\n    logger.error(\n      \"An unknown error has occurred. Please open an issue on github with the below:\"\n    );\n    console.log(err);\n  }\n  process.exit(1);\n});\n"]}